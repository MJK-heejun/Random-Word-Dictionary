{"version":3,"sources":["C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src async","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/app.component.css","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/app.component.html","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/app.component.ts","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/app.module.ts","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/random/random.component.css","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/random/random.component.html","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/random/random.component.ts","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/setting-service.service.ts","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/setting/setting.component.css","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/setting/setting.component.html","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/setting/setting.component.ts","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/word.service.ts","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/environments/environment.ts","C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../../../../src async recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src async\n// module id = ../../../../../src async recursive\n// module chunks = 1","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#appComp{\\r\\n    height:100vh;\\r\\n}\\r\\n\\r\\nmd-toolbar{\\r\\n    padding: 0;\\r\\n}\\r\\n\\r\\nmd-tab-group{\\r\\n    margin: 0;\\r\\n    border-top: 3px solid #000000; /*black*/\\r\\n    width: 100vw;\\r\\n    overflow: hidden;\\r\\n}\\r\\n\\r\\n.mat-sidenav-container > .mat-sidenav > .mat-tab-group > .mat-tab-header > .mat-tab-label-container > .mat-tab-list > .mat-tab-labels {\\r\\n  .mat-tab-label[role^='tab'] {\\r\\n    min-width: 72px;\\r\\n  }\\r\\n}\\r\\n\\r\\n    /*\\r\\n/deep/.mat-tab-label, /deep/.mat-tab-label-active{\\r\\n min-width: 0!important;\\r\\n padding: 3px!important;\\r\\n margin: 3px!important;\\r\\n}\\r\\n*/\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = 1","module.exports = \"<div id=\\\"appComp\\\">\\r\\n    <md-sidenav-container fxLayout=\\\"column\\\" fxFlexFill>\\r\\n\\r\\n        <md-toolbar fxLayout=\\\"row\\\">\\r\\n            <div class=\\\"sidenav-content\\\">\\r\\n                <button type=\\\"button\\\" md-button (click)=\\\"sidenav.open()\\\">\\r\\n                    <i class=\\\"fa fa-bars fa-2x\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                </button>\\r\\n            </div>\\r\\n            <h3>Random Word Dictionary</h3>            \\r\\n        </md-toolbar>\\r\\n        <div class=\\\"main-content\\\">\\r\\n            <md-tab-group md-stretch-tabs>\\r\\n                <md-tab label=\\\"Random\\\">\\r\\n                    <app-random></app-random>\\r\\n                </md-tab>\\r\\n                <md-tab label=\\\"Saved\\\">\\r\\n                    <h1>some saved list</h1>\\r\\n                </md-tab>\\r\\n            </md-tab-group>\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <md-sidenav #sidenav>\\r\\n            <app-setting></app-setting>\\r\\n        </md-sidenav>\\r\\n    </md-sidenav-container>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = 1","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n    title = 'app';\r\n    selectedIndex = 0;\r\n\r\n    setIndex(index){\r\n        this.selectedIndex = index;\r\n        console.log(`new index ${this.selectedIndex}`);\r\n    };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpModule } from '@angular/http';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MaterialModule } from '@angular/material';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\n//component\r\nimport { AppComponent } from './app.component';\r\nimport { RandomComponent } from './random/random.component';\r\nimport { SettingComponent } from './setting/setting.component';\r\n//service\r\nimport { SettingServiceService } from './setting-service.service';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RandomComponent,\r\n    SettingComponent\r\n  ],\r\n  imports: [\r\n      BrowserModule,\r\n      HttpModule,\r\n      BrowserAnimationsModule,\r\n      MaterialModule,\r\n      FlexLayoutModule,\r\n      FormsModule\r\n  ],\r\n  providers: [SettingServiceService ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/app.module.ts","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#randomComponent{\\r\\n    overflow: hidden;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/random/random.component.css\n// module id = ../../../../../src/app/random/random.component.css\n// module chunks = 1","module.exports = \"<div id=\\\"randomComponent\\\">\\r\\n    <div>\\r\\n        {{myData}}\\r\\n    </div>\\r\\n\\r\\n    <div>\\r\\n        <button md-raised-button (click)=\\\"onRandomClick()\\\">New Random Word</button>\\r\\n    </div>\\r\\n\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/random/random.component.html\n// module id = ../../../../../src/app/random/random.component.html\n// module chunks = 1","import { Component, OnInit } from '@angular/core';\r\nimport { WordService } from '../word.service';\r\nimport { SettingServiceService } from '../setting-service.service';\r\n\r\n@Component({\r\n  selector: 'app-random',\r\n  templateUrl: './random.component.html',\r\n  styleUrls: ['./random.component.css'],\r\n  providers: [WordService]\r\n})\r\nexport class RandomComponent implements OnInit {\r\n\r\n    myData: string;\r\n\r\n    constructor(private wordService: WordService, private settingService: SettingServiceService) { }\r\n\r\n    ngOnInit() {\r\n        //let wordType = this.settingComponent.getCurrentWordType() == \"any\" ? null : this.settingComponent.getCurrentWordType();\r\n        //console.log(`currnet word type is '${wordType}'`);\r\n        //this.wordService.getRandomWord(wordType).subscribe( //subscribe to the observable return method\r\n        //    data => this.myData = JSON.stringify(data),\r\n        //    error => alert(error),\r\n        //    () => console.log(\"finished\")\r\n        //);\r\n        \r\n    }\r\n\r\n    onRandomClick() {\r\n        let wordType = this.settingService.GetCurrentWordType() == \"any\" ? null : this.settingService.GetCurrentWordType();\r\n        \r\n        this.wordService.GetRandomWord(wordType).subscribe( //subscribe to the observable return method\r\n            data => this.myData = JSON.stringify(data),\r\n            error => alert(error),\r\n            () => console.log(\"finished\")\r\n        );        \r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/random/random.component.ts","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class SettingServiceService {\r\n\r\n    private wordType: string;\r\n    private isAutoDefLoad: boolean = true;\r\n\r\n    constructor() {\r\n        this.wordType = \"noun\";\r\n    }\r\n\r\n  public GetCurrentWordType(): string {\r\n      return this.wordType;\r\n  }\r\n\r\n  public SetWordType(wordType: string) {\r\n      this.wordType = wordType;\r\n  }\r\n\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/setting-service.service.ts","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#settingComponent{\\r\\n    padding: 10px;\\r\\n}\\r\\n\\r\\nmd-radio-button, md-checkbox{\\r\\n    padding: 10px;\\r\\n}\\r\\n\\r\\n.md-divider {\\r\\n    width: 100%;\\r\\n    border-width: 1px;\\r\\n    border-style: solid;\\r\\n    margin: 10px 0;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/setting/setting.component.css\n// module id = ../../../../../src/app/setting/setting.component.css\n// module chunks = 1","module.exports = \"<div id=\\\"settingComponent\\\">\\r\\n    <h2>Settings</h2>\\r\\n\\r\\n    <md-radio-group [(ngModel)]=\\\"wordType\\\" (ngModelChange)=\\\"onChange()\\\" fxLayout=\\\"column\\\">\\r\\n        <md-radio-button [value]=\\\"'any'\\\">\\r\\n            Any\\r\\n        </md-radio-button>\\r\\n        <md-radio-button [value]=\\\"'verb'\\\">\\r\\n            Verb\\r\\n        </md-radio-button>\\r\\n        <md-radio-button [value]=\\\"'noun'\\\">\\r\\n            Noun\\r\\n        </md-radio-button>\\r\\n        <md-radio-button [value]=\\\"'adjective'\\\">\\r\\n            Adjective\\r\\n        </md-radio-button>\\r\\n    </md-radio-group>\\r\\n    <md-divider></md-divider>\\r\\n\\r\\n    <div class=\\\"md-divider\\\"></div>\\r\\n\\r\\n\\r\\n    <section>\\r\\n        <md-checkbox  [(ngModel)]=\\\"isAutoDefLoad\\\">Auto definition loading</md-checkbox>\\r\\n    </section>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/setting/setting.component.html\n// module id = ../../../../../src/app/setting/setting.component.html\n// module chunks = 1","import { Component, OnInit } from '@angular/core';\r\nimport { SettingServiceService } from '../setting-service.service';\r\n\r\n@Component({\r\n  selector: 'app-setting',\r\n  templateUrl: './setting.component.html',\r\n  styleUrls: ['./setting.component.css']\r\n})\r\nexport class SettingComponent implements OnInit {\r\n\r\n    wordType: string = 'noun';\r\n    isAutoDefLoad: boolean = true;\r\n\r\n    constructor(private settingService: SettingServiceService) { }\r\n\r\n\r\n  //isAutoDefLoad(): boolean {\r\n  //    return false;\r\n  //}\r\n\r\n\r\n    ngOnInit() {\r\n        this.wordType = this.settingService.GetCurrentWordType();\r\n    }\r\n    onChange() {\r\n        console.log(\"changed\");\r\n        this.settingService.SetWordType(this.wordType);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/setting/setting.component.ts","import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class WordService {\n\r\n    baseUrl: string = `api.wordnik.com/v4/words.json/randomWord?hasDictionaryDef=false&minCorpusCount=0&maxCorpusCount=-1&minDictionaryCount=1&maxDictionaryCount=-1&minLength=5&maxLength=-1&api_key=a2a73e7b926c924fad7001ca3111acd55af2ffabf50eb4ae5`;\r\n\r\n    constructor(private http: Http) {\r\n        this.baseUrl = window.location.protocol == 'https:' ? `https://${this.baseUrl}` : `http://${this.baseUrl}`;\r\n    }\r\n\r\n    public GetRandomWord(wordType: string) {\r\n        let url = wordType ? this.baseUrl + `&includePartOfSpeech=${wordType}` : this.baseUrl;\r\n        console.log(`http call to: ${url}`);\r\n        return this.http.get(url)\r\n            .map((res: Response) => res.json()); //convert observable into json format\r\n    }\r\n\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/app/word.service.ts","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/james/Documents/Visual Studio 2015/Projects/randomWordDictionary/randomWordDictionary/src/main.ts"],"sourceRoot":"webpack:///"}